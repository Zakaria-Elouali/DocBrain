// _component-mixins.scss
// Reusable component styling patterns to reduce duplication and improve consistency

@use "sass:map";
@use "variables" as *;

// Card styling mixin - with direct shadow value to avoid dependency on undefined variables
@mixin card-style($bg: null, $border: null, $shadow: null) {
  // Use provided values or fallback to CSS variables or direct values
  background-color: $bg or var(--#{$prefix}card-bg, #c42f2f);
  border: 1px solid $border or var(--#{$prefix}card-border-color, rgba(0, 0, 0, 0.125));
  border-radius: map.get($border-radius-map, "default");

  // Direct shadow value as fallback
  @if $shadow {
    box-shadow: $shadow;
  } @else {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }

  .card-header {
    background-color: var(--#{$prefix}card-header-bg, rgba(0, 0, 0, 0.03));
    border-bottom: 1px solid var(--#{$prefix}card-border-color, rgba(0, 0, 0, 0.125));
    padding: 0.75rem 1.25rem;
  }

  .card-body {
    padding: 1.25rem;
  }

  .card-footer {
    background-color: var(--#{$prefix}card-footer-bg, rgba(0, 0, 0, 0.03));
    border-top: 1px solid var(--#{$prefix}card-border-color, rgba(0, 0, 0, 0.125));
    padding: 0.75rem 1.25rem;
  }
}

// Form label mixin
@mixin form-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: var(--#{$prefix}form-label-color, var(--#{$prefix}headings-color, #212529));
}

// Form field mixin
@mixin form-field {
  background-color: var(--#{$prefix}input-bg);
  color: var(--#{$prefix}input-color);
  border: 1px solid var(--#{$prefix}input-border);
  border-radius: var(--#{$prefix}border-radius);
  padding: 0.375rem 0.75rem;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

  &:focus {
    outline: none;
    border-color: var(--#{$prefix}input-focus-border);
    box-shadow: 0 0 0 0.2rem var(--#{$prefix}input-focus-shadow);
  }

  &::placeholder {
    color: var(--#{$prefix}input-placeholder-color);
    opacity: 1;
  }

  &:disabled,
  &[readonly] {
    background-color: var(--#{$prefix}input-disabled-bg);
    opacity: 1;
  }
}

// Button mixin with variant support
@mixin button($variant: "primary") {
  background-color: var(--#{$prefix}button-#{$variant}-bg);
  color: var(--#{$prefix}button-#{$variant}-color);
  border: 1px solid var(--#{$prefix}button-#{$variant}-border);
  border-radius: map.get($border-radius-map, "default"); // Use pill radius for rounded buttons
  padding: 0.375rem 0.75rem;
  cursor: pointer;
  transition: all 0.15s ease-in-out;

  &:hover {
    background-color: var(--#{$prefix}button-#{$variant}-hover-bg);
    color: var(--#{$prefix}button-#{$variant}-hover-color);
    border-color: var(--#{$prefix}button-#{$variant}-hover-border);
  }

  &:focus {
    outline: none;
    box-shadow: 0 0 0 0.2rem var(--#{$prefix}button-#{$variant}-focus-shadow);
  }

  &:disabled {
    opacity: 0.65;
    pointer-events: none;
  }
}

// Enhanced Modal styling mixin with overlay and size options
@mixin modal-overlay($fullscreen: false, $bg-color: rgba(0, 0, 0, 0.5), $header-gap: false, $content-padding-top: 0) {
  position: fixed;
  @if $fullscreen {
    // Blur always starts from the top (no gap with header)
    top: 0;
    height: 100vh;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
  } @else {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: auto;
  }
  background-color: $bg-color;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: map.get($z-index-map, "modal");
  backdrop-filter: blur(5px);

  // Add padding at the top to create gap between header and modal content
  @if $content-padding-top > 0 {
    padding-top: $content-padding-top;
  }
}

// Enhanced Modal styling mixin
@mixin modal-style($size: "md", $custom-width: null, $custom-bg: null, $custom-shadow: null, $fit-content: false) {
  // Size presets
  $width: 500px; // Default medium size
  @if $size == "sm" {
    $width: 400px;
  } @else if $size == "lg" {
    $width: 800px;
  } @else if $size == "xl" {
    $width: 1100px;
  } @else if $size == "full" {
    $width: 95%;
  }

  // Use custom width if provided
  $final-width: if($custom-width, $custom-width, $width);

  // Apply styles
  @if $fit-content {
    width: fit-content;
    min-width: 400px; // Minimum width for readability
  } @else {
    width: $final-width;
  }
  max-width: 95%;
  background-color: var(--#{$prefix}modal-bg, #ffffff);
  border-radius: map.get($border-radius-map, "lg");
  box-shadow: $custom-shadow or var(--#{$prefix}modal-shadow, 0 10px 30px rgba(0, 0, 0, 0.25));
  border: 1px solid var(--#{$prefix}modal-border);
  margin: 0 auto; // Center horizontally
  padding: 2rem; // Add padding for content
  max-height: 85vh;
  overflow-y: auto;
  z-index: map.get($z-index-map, "modal") + 1;
  @include flex-column;
  position: relative; // Keep position relative

  .modal-header {
    @include flex-between;
    padding: 0 0 1.25rem 0;
    border-bottom: 1px solid var(--#{$prefix}modal-border);

    h2, .modal-title {
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0;
      color: var(--#{$prefix}modal-title-color);

      // Optional decorative underline like in appointment modal
      &.with-underline:after {
        content: '';
        display: block;
        width: 50px;
        height: 3px;
        background: var(--#{$prefix}primary);
        margin: 8px auto 0;
        border-radius: 3px;
      }
    }

    .close-button {
      background: none;
      border: none;
      color: var(--#{$prefix}text-secondary);
      cursor: pointer;
      font-size: 1.25rem;
      padding: 0.25rem;
      @include flex-center;
      transition: color 0.2s;

      &:hover {
        color: var(--#{$prefix}danger);
      }
    }
  }

  .modal-body {
    padding: 1.25rem 0 0 0;
    flex: 1;
    overflow-y: auto;

    // Reduce spacing between form groups
    .form-group {
      margin-bottom: 0.75rem;

      &:last-child {
        margin-bottom: 0;
      }
    }

    // Reduce spacing between sections
    .section-header {
      margin-bottom: 0.75rem;
    }
  }

  .modal-footer {
    @include flex-between;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.25rem 0 0 0;
    margin-top: 1.25rem;
    border-top: 1px solid var(--#{$prefix}modal-border);

    button {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-weight: 500;
      padding: 0.625rem 1.25rem;
      border-radius: map.get($border-radius-map, "default");
      font-size: 14px;
      cursor: pointer;
      transition: all 0.2s;
    }
  }
}

// Table styling mixin
@mixin table-style {
  width: 100%;
  margin-bottom: 1rem;
  color: var(--#{$prefix}table-color);
  border-collapse: collapse;

  th, td {
    padding: 0.75rem;
    vertical-align: top;
    border-top: 1px solid var(--#{$prefix}table-border-color);
  }

  thead th {
    vertical-align: bottom;
    border-bottom: 2px solid var(--#{$prefix}table-border-color);
    background-color: var(--#{$prefix}table-header-bg);
    color: var(--#{$prefix}table-header-color);
  }

  tbody tr:nth-of-type(odd) {
    background-color: var(--#{$prefix}table-striped-bg);
  }
}

// Enhanced Sidebar item mixin with support for file tree items
@mixin sidebar-item($is-tree-item: false) {
  display: flex;
  align-items: center;
  color: var(--#{$prefix}sidebar-menu-item-color, #9aaab3);
  background-color: var(--#{$prefix}sidebar-menu-item-bg, transparent);
  padding: 0.5rem 1rem;
  border-radius: 0.25rem;
  transition: all 0.2s ease;
  cursor: pointer;

  @if $is-tree-item {
    padding: 4px 8px;

    &:hover {
      background-color: var(--#{$prefix}sidebar-menu-item-hover-bg, rgba(255, 255, 255, 0.05));
    }
  } @else {
    &:hover {
      color: var(--#{$prefix}sidebar-menu-item-hover-color);
      background-color: var(--#{$prefix}sidebar-menu-item-hover-bg);
    }
  }

  &.active {
    color: var(--#{$prefix}sidebar-menu-item-active-color);
    background-color: var(--#{$prefix}sidebar-menu-item-active-bg);
  }
}

// File tree item icon mixin
@mixin tree-item-icon($type: "default") {
  display: flex;
  align-items: center;
  justify-content: center;

  @if $type == "folder" {
    color: var(--#{$prefix}folder-icon-color, #64B5F6);
  } @else if $type == "file" {
    color: var(--#{$prefix}file-icon-color, #9aaab3);
  } @else {
    color: var(--#{$prefix}sidebar-menu-item-color, #ffffff);
  }

  &.expanded {
    transform: rotate(90deg);
  }
}

// Main area container mixin with positioning and RTL support
@mixin main-area-container($padding: 1.5rem, $with-position: true) {
  @if $with-position {
    position: fixed;
    top: map.get($layout-dimensions, "header-height");
    right: 0;
    height: calc(100vh - #{map.get($layout-dimensions, "header-height")});
    width: calc(100% - #{map.get($layout-dimensions, "fullsidebar-width")});

    // RTL support
    @include rtl-support {
      right: auto;
      left: 0;
    }
  }

  background-color: var(--#{$prefix}main-area-bg);
  border-radius: 0.5rem;
  box-shadow: var(--#{$prefix}main-area-shadow);
  padding: $padding;
  overflow: auto;

  @media (max-width: 768px) {
    width: 100%;
  }
}

// Main area content mixin
@mixin main-area-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: auto;
}
//
//// Main area with sidebar layout mixin
//@mixin main-area-with-sidebar($sidebar-width: map-get($layout-dimensions, "sidebar-width")) {
//  display: flex;
//  height: 100%;
//
//  .sidebar {
//    width: $sidebar-width;
//    overflow-y: auto;
//    border-right: 1px solid var(--#{$prefix}border-color);
//  }
//
//  .content {
//    flex: 1;
//    overflow: auto;
//  }
//}

// Flex layout mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// RTL support mixin
@mixin rtl-support {
  [dir="rtl"] & {
    @content;
  }
}

// Responsive container mixin
@mixin responsive-container {
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;

  @media (min-width: 576px) {
    max-width: 540px;
  }

  @media (min-width: 768px) {
    max-width: 720px;
  }

  @media (min-width: 992px) {
    max-width: 960px;
  }

  @media (min-width: 1200px) {
    max-width: 1140px;
  }
}
